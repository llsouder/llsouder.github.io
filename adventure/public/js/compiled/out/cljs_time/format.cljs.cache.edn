{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {difference clojure.set}, :excludes #{}, :name cljs-time.format, :imports nil, :requires {cljs-time.internal.parse cljs-time.internal.parse, i cljs-time.internal.core, unparse cljs-time.internal.unparse, cljs-time.internal.unparse cljs-time.internal.unparse, goog.date.duration goog.date.duration, cljs-time.core cljs-time.core, clojure.set clojure.set, time cljs-time.core, cljs-time.internal.core cljs-time.internal.core, duration goog.date.duration, parse cljs-time.internal.parse}, :cljs.spec/speced-vars [], :uses {difference clojure.set}, :defs {not-implemented {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 60, :column 7, :end-line 60, :end-column 22, :arglists (quote ([sym]))}, :name cljs-time.format/not-implemented, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 22, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, Formatter {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs-time.format/Formatter, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 46, :record true, :end-line 46, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, to-map {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 286, :column 8, :end-line 286, :end-column 14, :private true, :arglists (quote ([years months days hours minutes seconds millis]))}, :private true, :name cljs-time.format/to-map, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 14, :method-params ([years months days hours minutes seconds millis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 7, :fn-var true, :arglists (quote ([years months days hours minutes seconds millis]))}, parse-local {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 218, :column 7, :end-line 218, :end-column 18, :arglists (quote ([fmt s] [s])), :doc "Returns a local DateTime instance obtained by parsing the\n  given string according to the given formatter.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}}, :name cljs-time.format/parse-local, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}, :method-params ([fmt s] [s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists ([fmt s] [s]), :doc "Returns a local DateTime instance obtained by parsing the\n  given string according to the given formatter."}, parsers {:name cljs-time.format/parsers, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :line 197, :column 1, :end-line 197, :end-column 30, :private true, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 197, :column 23, :end-line 197, :end-column 30, :private true}, :tag cljs.core/ISet}, unparse-local-date {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 258, :column 7, :end-line 258, :end-column 25, :arglists (quote ([{:keys [format-str formatters], :as fmt} dt])), :doc "Returns a string representing the given local Date instance in the form\n  determined by the given formatter."}, :name cljs-time.format/unparse-local-date, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 25, :method-params ([p__34054 dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [format-str formatters], :as fmt} dt])), :doc "Returns a string representing the given local Date instance in the form\n  determined by the given formatter."}, Mappable {:meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 274, :column 14, :end-line 274, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {instant->map [[instant]]}}}, :protocol-symbol true, :name cljs-time.format/Mappable, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 22, :column 1, :line 274, :protocol-info {:methods {instant->map [[instant]]}}, :info nil, :end-line 274, :tag any, :impls #{cljs.core/PersistentArrayMap cljs-time.core/Interval cljs-time.core/Period goog/date.UtcDateTime}, :doc nil, :jsdoc ("@interface")}, skip-timezone-formatter {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 43, :column 7, :end-line 43, :end-column 30, :arglists (quote ([]))}, :name cljs-time.format/skip-timezone-formatter, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, map->Formatter {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 46, :column 12, :end-line 46, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__34003]))}, :name cljs-time.format/map->Formatter, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 21, :method-params ([G__34003]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__34003]))}, show-formatters {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 265, :column 7, :end-line 265, :end-column 22, :arglists (quote ([] [dt])), :doc "Shows how a given DateTime, or by default the current time, would be\nformatted with each of the available printing formatters.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [dt]), :arglists ([] [dt]), :arglists-meta (nil nil)}}, :name cljs-time.format/show-formatters, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [dt]), :arglists ([] [dt]), :arglists-meta (nil nil)}, :method-params ([] [dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists ([] [dt]), :doc "Shows how a given DateTime, or by default the current time, would be\nformatted with each of the available printing formatters."}, unparse {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 244, :column 7, :end-line 244, :end-column 14, :arglists (quote ([{:keys [format-str formatters]} dt])), :doc "Returns a string representing the given DateTime instance in UTC and in the\nform determined by the given formatter."}, :name cljs-time.format/unparse, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 14, :method-params ([p__34048 dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [format-str formatters]} dt])), :doc "Returns a string representing the given DateTime instance in UTC and in the\nform determined by the given formatter."}, printers {:name cljs-time.format/printers, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :line 202, :column 1, :end-line 202, :end-column 31, :private true, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 202, :column 23, :end-line 202, :end-column 31, :private true}, :tag any}, formatters {:name cljs-time.format/formatters, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :line 64, :column 1, :end-line 142, :end-column 13, :doc "**Note: not all formatters have been implemented yet.**\n\n  Map of ISO 8601 and a single RFC 822 formatters that can be used\n  for parsing and, in most cases, printing.\n  \n  Note: due to current implementation limitations, timezone information\n  cannot be kept. Although the correct offset will be applied to UTC\n  time if supplied.\n\n  The pattern syntax is mostly compatible with java.text.SimpleDateFormat -\n  time zone names cannot be parsed and a few more symbols are supported. All\n  ASCII letters are reserved as pattern letters, which are defined as follows:\n\n```\n    Symbol  Meaning                      Presentation  Examples\n    ------  -------                      ------------  -------\n    G       era                          text          AD\n    C       century of era (>=0)         number        20\n    Y       year of era (>=0)            year          1996\n\n    x       weekyear                     year          1996\n    w       week of weekyear             number        27\n    e       day of week                  number        2\n    E       day of week                  text          Tuesday; Tue\n\n    y       year                         year          1996\n    D       day of year                  number        189\n    M       month of year                month         July; Jul; 07\n    d       day of month                 number        10\n\n    a       halfday of day               text          PM\n    K       hour of halfday (0~11)       number        0\n    h       clockhour of halfday (1~12)  number        12\n\n    H       hour of day (0~23)           number        0\n    k       clockhour of day (1~24)      number        24\n    m       minute of hour               number        30\n    s       second of minute             number        55\n    S       fraction of second           number        978\n    a       meridiem                     text          am; pm\n    A       meridiem                     text          AM; PM\n\n    z       time zone                    text          Pacific Standard Time; PST\n    Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles\n\n    '       escape for text              delimiter\n    ''      single quote                 literal       '\n\n    cljs-time additions:\n    ------  -------                      ------------  -------\n    Symbol  Meaning                      Presentation  Examples\n    ------  -------                      ------------  -------\n    o       ordinal suffix               text          st nd rd th (E.G., 1st, 2nd, 3rd, 4th)\n```\n\n  The count of pattern letters determine the format.\n\n  **Text:** If the number of pattern letters is 4 or more, the full form is used;\n  otherwise a short or abbreviated form is used if available.\n\n  **Number:** The minimum number of digits. Shorter numbers are zero-padded to this\n  amount.\n\n  **Year:** Numeric presentation for year and weekyear fields are handled\n  specially. For example, if the count of `y` is 2, the year will be displayed\n  as the zero-based year of the century, which is two digits.\n\n  **Month:** 3 or over, use text, otherwise use number.\n\n  **Zone:** `Z` outputs offset without a colon, `ZZ` outputs the offset with a\n  colon, `ZZZ` or more outputs the zone id.\n\n  **Zone names:** Time zone names ('z') cannot be parsed.\n\n  Any characters in the pattern that are not in the ranges of `['a'..'z']` and\n  `['A'..'Z']` will be treated as quoted text. For instance, characters like `:`,\n  `.`, `<space>`, `#` and `?` will appear in the resulting time text even they are\n  not embraced within single quotes.", :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 142, :column 3, :end-line 142, :end-column 13, :doc "**Note: not all formatters have been implemented yet.**\n\n  Map of ISO 8601 and a single RFC 822 formatters that can be used\n  for parsing and, in most cases, printing.\n  \n  Note: due to current implementation limitations, timezone information\n  cannot be kept. Although the correct offset will be applied to UTC\n  time if supplied.\n\n  The pattern syntax is mostly compatible with java.text.SimpleDateFormat -\n  time zone names cannot be parsed and a few more symbols are supported. All\n  ASCII letters are reserved as pattern letters, which are defined as follows:\n\n```\n    Symbol  Meaning                      Presentation  Examples\n    ------  -------                      ------------  -------\n    G       era                          text          AD\n    C       century of era (>=0)         number        20\n    Y       year of era (>=0)            year          1996\n\n    x       weekyear                     year          1996\n    w       week of weekyear             number        27\n    e       day of week                  number        2\n    E       day of week                  text          Tuesday; Tue\n\n    y       year                         year          1996\n    D       day of year                  number        189\n    M       month of year                month         July; Jul; 07\n    d       day of month                 number        10\n\n    a       halfday of day               text          PM\n    K       hour of halfday (0~11)       number        0\n    h       clockhour of halfday (1~12)  number        12\n\n    H       hour of day (0~23)           number        0\n    k       clockhour of day (1~24)      number        24\n    m       minute of hour               number        30\n    s       second of minute             number        55\n    S       fraction of second           number        978\n    a       meridiem                     text          am; pm\n    A       meridiem                     text          AM; PM\n\n    z       time zone                    text          Pacific Standard Time; PST\n    Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles\n\n    '       escape for text              delimiter\n    ''      single quote                 literal       '\n\n    cljs-time additions:\n    ------  -------                      ------------  -------\n    Symbol  Meaning                      Presentation  Examples\n    ------  -------                      ------------  -------\n    o       ordinal suffix               text          st nd rd th (E.G., 1st, 2nd, 3rd, 4th)\n```\n\n  The count of pattern letters determine the format.\n\n  **Text:** If the number of pattern letters is 4 or more, the full form is used;\n  otherwise a short or abbreviated form is used if available.\n\n  **Number:** The minimum number of digits. Shorter numbers are zero-padded to this\n  amount.\n\n  **Year:** Numeric presentation for year and weekyear fields are handled\n  specially. For example, if the count of `y` is 2, the year will be displayed\n  as the zero-based year of the century, which is two digits.\n\n  **Month:** 3 or over, use text, otherwise use number.\n\n  **Zone:** `Z` outputs offset without a colon, `ZZ` outputs the offset with a\n  colon, `ZZZ` or more outputs the zone id.\n\n  **Zone names:** Time zone names ('z') cannot be parsed.\n\n  Any characters in the pattern that are not in the ranges of `['a'..'z']` and\n  `['A'..'Z']` will be treated as quoted text. For instance, characters like `:`,\n  `.`, `<space>`, `#` and `?` will appear in the resulting time text even they are\n  not embraced within single quotes."}, :tag cljs.core/IMap}, parse-local-date {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 231, :column 7, :end-line 231, :end-column 23, :arglists (quote ([fmt s] [s])), :doc "Returns a local Date instance obtained by parsing the\n  given string according to the given formatter.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}}, :name cljs-time.format/parse-local-date, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}, :method-params ([fmt s] [s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists ([fmt s] [s]), :doc "Returns a local Date instance obtained by parsing the\n  given string according to the given formatter."}, ->Formatter {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 46, :column 12, :end-line 46, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([format-str overrides default-year timezone]))}, :name cljs-time.format/->Formatter, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 21, :method-params ([format-str overrides default-year timezone]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 46, :end-line 46, :max-fixed-arity 4, :fn-var true, :arglists (quote ([format-str overrides default-year timezone]))}, unparse-duration {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 279, :column 7, :end-line 279, :end-column 23, :arglists (quote ([duration])), :doc "Accepts a Period or Interval and outputs an absolute duration time\n  in form of \"1 day\", \"2 hours\", \"20 minutes\", \"2 days 1 hour\n  15 minutes\" etc."}, :name cljs-time.format/unparse-duration, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 23, :method-params ([duration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([duration])), :doc "Accepts a Period or Interval and outputs an absolute duration time\n  in form of \"1 day\", \"2 hours\", \"20 minutes\", \"2 days 1 hour\n  15 minutes\" etc."}, formatter {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([fmts] [fmts dtz])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmts] [fmts dtz]), :arglists ([fmts] [fmts dtz]), :arglists-meta (nil nil)}}, :name cljs-time.format/formatter, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmts] [fmts dtz]), :arglists ([fmts] [fmts dtz]), :arglists-meta (nil nil)}, :method-params ([fmts] [fmts dtz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists ([fmts] [fmts dtz])}, months {:name cljs-time.format/months, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :line 40, :column 1, :end-line 40, :end-column 12, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 40, :column 6, :end-line 40, :end-column 12}, :tag cljs.core/IVector}, days {:name cljs-time.format/days, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :line 41, :column 1, :end-line 41, :end-column 10, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 41, :column 6, :end-line 41, :end-column 10}, :tag cljs.core/IVector}, unparse-local {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 251, :column 7, :end-line 251, :end-column 20, :arglists (quote ([{:keys [format-str formatters], :as fmt} dt])), :doc "Returns a string representing the given local DateTime instance in the\n  form determined by the given formatter."}, :name cljs-time.format/unparse-local, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 20, :method-params ([p__34051 dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [format-str formatters], :as fmt} dt])), :doc "Returns a string representing the given local DateTime instance in the\n  form determined by the given formatter."}, formatter-local {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 52, :column 7, :end-line 52, :end-column 22, :arglists (quote ([fmts]))}, :name cljs-time.format/formatter-local, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 22, :method-params ([fmts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fmts]))}, instant->map {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 275, :column 4, :end-line 275, :end-column 16, :protocol cljs-time.format/Mappable, :doc "Returns a map representation of the given instant.\n                          It will contain the following keys: :years, :months,\n                          :days, :hours, :minutes and :seconds.", :arglists (quote ([instant]))}, :protocol cljs-time.format/Mappable, :name cljs-time.format/instant->map, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 16, :method-params ([instant]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 275, :max-fixed-arity 1, :fn-var true, :arglists (quote ([instant])), :doc "Returns a map representation of the given instant.\n                          It will contain the following keys: :years, :months,\n                          :days, :hours, :minutes and :seconds."}, with-default-year {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 55, :column 7, :end-line 55, :end-column 24, :arglists (quote ([f default-year])), :doc "Return a copy of a formatter that uses the given default year."}, :name cljs-time.format/with-default-year, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 24, :method-params ([f default-year]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f default-year])), :doc "Return a copy of a formatter that uses the given default year."}, parse {:protocol-inline nil, :meta {:file "/home/llsouder/adventure/resources/public/js/compiled/out/cljs_time/format.cljs", :line 205, :column 7, :end-line 205, :end-column 12, :arglists (quote ([fmt s] [s])), :doc "Returns a DateTime instance in the UTC time zone obtained by parsing the\n  given string according to the given formatter.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}}, :name cljs-time.format/parse, :variadic false, :file "resources/public/js/compiled/out/cljs_time/format.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([fmt s] [s]), :arglists ([fmt s] [s]), :arglists-meta (nil nil)}, :method-params ([fmt s] [s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists ([fmt s] [s]), :doc "Returns a DateTime instance in the UTC time zone obtained by parsing the\n  given string according to the given formatter."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{localTimeParser :date-element-parser :hour-minute :formatters :t-time timeParser :basic-ordinal-date :date :hour :timezone :time-no-ms :weekyear-week-day :overrides :week-date-time :date-hour-minute-second-fraction :basic-date-time :date-time :basic-time-no-ms :date-parser :basic-week-date default-year dateOptionalTimeParser :else :basic-t-time-no-ms :local-time :date-time-no-ms :year-month-day :date-opt-time :rfc822 :date-hour-minute-second-ms :basic-ordinal-date-time timeElementParser :ordinal-date :hour-minute-second-fraction :date-hour-minute :time overrides :basic-week-date-time timezone :months :days :format-str :weekyear :type :basic-time localDateParser :hour-minute-second :ordinal-date-time :seconds dateParser :ordinal-date-time-no-ms :hour-minute-second-ms :time-parser :date-time-parser :year :t-time-no-ms dateElementParser :basic-week-date-time-no-ms localDateOptionalTimeParser :basic-date :goog.date.DateTime format-str :weekyear-week :local-date :goog.date.Date :basic-ordinal-date-time-no-ms :year-month dateTimeParser :local-date-opt-time :hours :years :week-date :date-hour :minutes :not-implemented :goog.date.UtcDateTime :time-element-parser :date-hour-minute-second :week-date-time-no-ms :basic-date-time-no-ms :millis :mysql :basic-t-time :default-year}, :order [:format-str :overrides :default-year :timezone format-str overrides default-year timezone :not-implemented :date-element-parser :hour-minute :t-time :basic-ordinal-date :date :hour :time-no-ms :weekyear-week-day :week-date-time :date-hour-minute-second-fraction :basic-date-time :date-time :basic-time-no-ms :date-parser :basic-week-date :basic-t-time-no-ms :local-time :date-time-no-ms :year-month-day :date-opt-time :rfc822 :date-hour-minute-second-ms :basic-ordinal-date-time :ordinal-date :hour-minute-second-fraction :date-hour-minute :time :basic-week-date-time :weekyear :basic-time :hour-minute-second :ordinal-date-time :ordinal-date-time-no-ms :hour-minute-second-ms :time-parser :date-time-parser :year :t-time-no-ms :basic-week-date-time-no-ms :basic-date :weekyear-week :local-date :basic-ordinal-date-time-no-ms :year-month :local-date-opt-time :week-date :date-hour :time-element-parser :date-hour-minute-second :week-date-time-no-ms :basic-date-time-no-ms :mysql :basic-t-time dateElementParser dateParser localTimeParser dateOptionalTimeParser timeParser dateTimeParser localDateParser localDateOptionalTimeParser timeElementParser :goog.date.UtcDateTime :goog.date.DateTime :else :goog.date.Date :formatters :years :months :days :hours :minutes :seconds :millis :type]}, :doc "### Utilities for parsing and unparsing DateTimes as Strings.\n\n  Parsing and printing are controlled by formatters. You can either use one\n  of the built in ISO 8601 and a single RFC 822 formatters or define your own, e.g.:\n\n```clojure\n(def built-in-formatter (formatters :basic-date-time))\n(def custom-formatter (formatter \"yyyyMMdd\"))\n```\n\n  To see a list of available built-in formatters and an example of a date-time\n  printed in their format:\n\n```clojure\n(show-formatters)\n```\n\n  Once you have a formatter, parsing and printing are strait-forward:\n\n```clojure\n=> (parse custom-formatter \"20100311\")\n#<DateTime 2010-03-11T00:00:00.000Z>\n\n=> (unparse custom-formatter (date-time 2010 10 3))\n\"20101003\"\n```\n\n  By default the parse function always returns a DateTime instance with a UTC\n  time zone, and the unparse function always represents a given DateTime\n  instance in UTC."}